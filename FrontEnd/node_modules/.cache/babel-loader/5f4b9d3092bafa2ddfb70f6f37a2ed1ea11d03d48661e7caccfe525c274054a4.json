{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\boyea\\\\OneDrive - Milwaukee School of Engineering\\\\Desktop\\\\Findings\\\\Bellford2\\\\BELLMAN-FORD-ALGORITHM\\\\FrontEnd\\\\src\\\\components\\\\ResultTable.jsx\";\nimport React from 'react';\nimport '../styles/ResultTable.css'; // Add a CSS file for styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultTable({\n  results,\n  airports\n}) {\n  if (!results) return null;\n\n  // Helper function to map airport codes to \"CODE (Name)\" format\n  const formatRoute = route => {\n    return route.map(code => {\n      const airport = airports.find(airport => airport.IATA === code);\n      return airport ? `${code} (${airport.NAME})` : code;\n    }).join(' -> ');\n  };\n\n  // Extract data from the results object\n  const {\n    userRoute,\n    shortestPath,\n    shortestDistance,\n    alternativeRoutes\n  } = results;\n\n  // Prepare the rows for the table\n  const userRouteRow = userRoute ? {\n    route: formatRoute(userRoute.route),\n    distance: userRoute.distance\n  } : null;\n  const shortestPathRow = {\n    route: formatRoute(shortestPath),\n    distance: shortestDistance\n  };\n  const sortedAlternativeRoutes = alternativeRoutes.sort((a, b) => a.distance - b.distance) // Sort in ascending order of distance\n  .map(route => ({\n    route: formatRoute(route.route),\n    distance: route.distance\n  }));\n\n  // Combine all rows\n  const tableRows = [...(userRouteRow ? [userRouteRow] : []), shortestPathRow, ...sortedAlternativeRoutes];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"result-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Route Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Route\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Distance (miles)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.route\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.distance.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_c = ResultTable;\nexport default ResultTable;\nvar _c;\n$RefreshReg$(_c, \"ResultTable\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ResultTable","results","airports","formatRoute","route","map","code","airport","find","IATA","NAME","join","userRoute","shortestPath","shortestDistance","alternativeRoutes","userRouteRow","distance","shortestPathRow","sortedAlternativeRoutes","sort","a","b","tableRows","className","children","fileName","_jsxFileName","lineNumber","columnNumber","row","index","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/boyea/OneDrive - Milwaukee School of Engineering/Desktop/Findings/Bellford2/BELLMAN-FORD-ALGORITHM/FrontEnd/src/components/ResultTable.jsx"],"sourcesContent":["import React from 'react';\r\nimport '../styles/ResultTable.css'; // Add a CSS file for styles\r\n\r\nfunction ResultTable({ results, airports }) {\r\n    if (!results) return null;\r\n\r\n    // Helper function to map airport codes to \"CODE (Name)\" format\r\n    const formatRoute = (route) => {\r\n        return route\r\n            .map((code) => {\r\n                const airport = airports.find((airport) => airport.IATA === code);\r\n                return airport ? `${code} (${airport.NAME})` : code;\r\n            })\r\n            .join(' -> ');\r\n    };\r\n\r\n    // Extract data from the results object\r\n    const { userRoute, shortestPath, shortestDistance, alternativeRoutes } = results;\r\n\r\n    // Prepare the rows for the table\r\n    const userRouteRow = userRoute\r\n        ? {\r\n              route: formatRoute(userRoute.route),\r\n              distance: userRoute.distance,\r\n          }\r\n        : null;\r\n\r\n    const shortestPathRow = {\r\n        route: formatRoute(shortestPath),\r\n        distance: shortestDistance,\r\n    };\r\n\r\n    const sortedAlternativeRoutes = alternativeRoutes\r\n        .sort((a, b) => a.distance - b.distance) // Sort in ascending order of distance\r\n        .map((route) => ({\r\n            route: formatRoute(route.route),\r\n            distance: route.distance,\r\n        }));\r\n\r\n    // Combine all rows\r\n    const tableRows = [\r\n        ...(userRouteRow ? [userRouteRow] : []),\r\n        shortestPathRow,\r\n        ...sortedAlternativeRoutes,\r\n    ];\r\n\r\n    return (\r\n        <div className=\"result-table\">\r\n            <h2>All Route Results</h2>\r\n            <div className=\"table-container\">\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Route</th>\r\n                            <th>Distance (miles)</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tableRows.map((row, index) => (\r\n                            <tr key={index}>\r\n                                <td>{row.route}</td>\r\n                                <td>{row.distance.toFixed(2)}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}