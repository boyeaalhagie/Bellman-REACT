{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\boyea\\\\OneDrive - Milwaukee School of Engineering\\\\Desktop\\\\Findings\\\\Bellford2\\\\BELLMAN-FORD-ALGORITHM\\\\FrontEnd\\\\src\\\\components\\\\Map.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef } from 'react';\nimport { GoogleMap, Polyline, Marker } from '@react-google-maps/api';\nimport airports from '../data/airports.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '700px'\n};\nfunction Map({\n  route\n}) {\n  _s();\n  var _routeResults, _routeResults$userRou;\n  const mapRef = useRef(null);\n  const onLoad = useCallback(map => {\n    mapRef.current = map;\n\n    // Fit the map to the route\n    if (route && route.length > 0) {\n      const bounds = new window.google.maps.LatLngBounds();\n      route.forEach(point => bounds.extend(point));\n      map.fitBounds(bounds);\n    }\n  }, [route]);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    onLoad: onLoad,\n    options: {\n      disableDefaultUI: true,\n      // Removes default controls\n      zoomControl: true,\n      minZoom: 2,\n      maxZoom: 20\n    },\n    children: [route && route.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n      path: route,\n      options: {\n        strokeColor: 'blue',\n        // Bright green color\n        strokeOpacity: 0.7,\n        strokeWeight: 5\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this), route && route.map((point, index) => {\n      const airport = airports.find(airport => airport.LAT === point.lat && airport.LONG === point.lng);\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: point,\n        label: {\n          text: (airport === null || airport === void 0 ? void 0 : airport.IATA) || (index + 1).toString(),\n          color: 'black'\n        },\n        title: (airport === null || airport === void 0 ? void 0 : airport.NAME) || `Airport ${index + 1}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this);\n    }), ((_routeResults = routeResults) === null || _routeResults === void 0 ? void 0 : (_routeResults$userRou = _routeResults.userRoute) === null || _routeResults$userRou === void 0 ? void 0 : _routeResults$userRou.route) && routeResults.userRoute.route.map((code, index) => {\n      const airport = airports.find(airport => airport.IATA === code);\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: airport.LAT,\n          lng: airport.LONG\n        },\n        label: {\n          text: airport.IATA,\n          color: 'black'\n        },\n        title: airport.NAME\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(Map, \"WYjahiVxY8sTdszoIOcK2iNaRlQ=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useCallback","useRef","GoogleMap","Polyline","Marker","airports","jsxDEV","_jsxDEV","containerStyle","width","height","Map","route","_s","_routeResults","_routeResults$userRou","mapRef","onLoad","map","current","length","bounds","window","google","maps","LatLngBounds","forEach","point","extend","fitBounds","mapContainerStyle","options","disableDefaultUI","zoomControl","minZoom","maxZoom","children","path","strokeColor","strokeOpacity","strokeWeight","fileName","_jsxFileName","lineNumber","columnNumber","index","airport","find","LAT","lat","LONG","lng","position","label","text","IATA","toString","color","title","NAME","routeResults","userRoute","code","_c","$RefreshReg$"],"sources":["C:/Users/boyea/OneDrive - Milwaukee School of Engineering/Desktop/Findings/Bellford2/BELLMAN-FORD-ALGORITHM/FrontEnd/src/components/Map.jsx"],"sourcesContent":["import React, { useCallback, useRef } from 'react';\r\nimport { GoogleMap, Polyline, Marker } from '@react-google-maps/api';\r\nimport airports from '../data/airports.json';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '700px',\r\n};\r\n\r\nfunction Map({ route }) {\r\n    const mapRef = useRef(null);\r\n\r\n    const onLoad = useCallback((map) => {\r\n        mapRef.current = map;\r\n\r\n        // Fit the map to the route\r\n        if (route && route.length > 0) {\r\n            const bounds = new window.google.maps.LatLngBounds();\r\n            route.forEach((point) => bounds.extend(point));\r\n            map.fitBounds(bounds);\r\n        }\r\n    }, [route]);\r\n\r\n    return (\r\n        <GoogleMap\r\n            mapContainerStyle={containerStyle}\r\n            onLoad={onLoad}\r\n            options={{\r\n                disableDefaultUI: true, // Removes default controls\r\n                zoomControl: true,\r\n                minZoom: 2,\r\n                maxZoom: 20,\r\n            }}\r\n        >\r\n            {/* Draw the route polyline in green */}\r\n            {route && route.length > 0 && (\r\n                <Polyline\r\n                    path={route}\r\n                    options={{\r\n                        strokeColor: 'blue', // Bright green color\r\n                        strokeOpacity: 0.7,\r\n                        strokeWeight: 5,\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* Add markers for the airports */}\r\n            {route &&\r\n                route.map((point, index) => {\r\n                    const airport = airports.find((airport) => airport.LAT === point.lat && airport.LONG === point.lng);\r\n                    return (\r\n                        <Marker\r\n                            key={index}\r\n                            position={point}\r\n                            label={{\r\n                                text: airport?.IATA || (index + 1).toString(),\r\n                                color: 'black'\r\n                            }}\r\n                            title={airport?.NAME || `Airport ${index + 1}`}\r\n                        />\r\n                    );\r\n                })}\r\n\r\n            {/* Add markers for connecting flights in the user's proposed route */}\r\n            {routeResults?.userRoute?.route && routeResults.userRoute.route.map((code, index) => {\r\n                const airport = airports.find((airport) => airport.IATA === code);\r\n                return (\r\n                    <Marker\r\n                        key={index}\r\n                        position={{ lat: airport.LAT, lng: airport.LONG }}\r\n                        label={{\r\n                            text: airport.IATA,\r\n                            color: 'black'\r\n                        }}\r\n                        title={airport.NAME}\r\n                    />\r\n                );\r\n            })}\r\n        </GoogleMap>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}