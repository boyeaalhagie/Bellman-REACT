{"ast":null,"code":"// utils/api.js\n\n/**\r\n * Makes a POST request to calculate the shortest path.\r\n * @param {string} start - Starting airport IATA code.\r\n * @param {string} end - Destination airport IATA code.\r\n * @param {string} userRoute - User-proposed route (comma-separated IATA codes).\r\n * @returns {Promise<Object>} - Response from the backend with the shortest path and distances.\r\n */\nexport const calculateShortestPath = async (start, end, userRoute) => {\n  try {\n    const response = await fetch('/api/calculate-shortest-path', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        start,\n        end,\n        userRoute\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to calculate shortest path');\n    }\n    return response.json(); // Returns the backend response as a JavaScript object\n  } catch (error) {\n    console.error('Error in calculateShortestPath:', error);\n    throw error; // Re-throw the error to be handled by the calling code\n  }\n};\n\n/**\r\n* Fetches the list of airports from the backend.\r\n* @returns {Promise<Array>} - List of airports as an array of objects.\r\n*/\nexport const fetchAirports = async () => {\n  try {\n    const response = await fetch('/api/airports', {\n      method: 'GET'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch airports');\n    }\n    return response.json(); // Returns the list of airports\n  } catch (error) {\n    console.error('Error in fetchAirports:', error);\n    throw error; // Re-throw the error to be handled by the calling code\n  }\n};","map":{"version":3,"names":["calculateShortestPath","start","end","userRoute","response","fetch","method","headers","body","JSON","stringify","ok","error","json","Error","console","fetchAirports"],"sources":["C:/Users/boyea/OneDrive - Milwaukee School of Engineering/Desktop/Findings/Bellford2/BELLMAN-FORD-ALGORITHM/FrontEnd/src/utils/api.js"],"sourcesContent":["// utils/api.js\r\n\r\n/**\r\n * Makes a POST request to calculate the shortest path.\r\n * @param {string} start - Starting airport IATA code.\r\n * @param {string} end - Destination airport IATA code.\r\n * @param {string} userRoute - User-proposed route (comma-separated IATA codes).\r\n * @returns {Promise<Object>} - Response from the backend with the shortest path and distances.\r\n */\r\nexport const calculateShortestPath = async (start, end, userRoute) => {\r\n  try {\r\n      const response = await fetch('/api/calculate-shortest-path', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              start,\r\n              end,\r\n              userRoute,\r\n          }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n          const error = await response.json();\r\n          throw new Error(error.error || 'Failed to calculate shortest path');\r\n      }\r\n\r\n      return response.json(); // Returns the backend response as a JavaScript object\r\n  } catch (error) {\r\n      console.error('Error in calculateShortestPath:', error);\r\n      throw error; // Re-throw the error to be handled by the calling code\r\n  }\r\n};\r\n\r\n/**\r\n* Fetches the list of airports from the backend.\r\n* @returns {Promise<Array>} - List of airports as an array of objects.\r\n*/\r\nexport const fetchAirports = async () => {\r\n  try {\r\n      const response = await fetch('/api/airports', {\r\n          method: 'GET',\r\n      });\r\n\r\n      if (!response.ok) {\r\n          throw new Error('Failed to fetch airports');\r\n      }\r\n\r\n      return response.json(); // Returns the list of airports\r\n  } catch (error) {\r\n      console.error('Error in fetchAirports:', error);\r\n      throw error; // Re-throw the error to be handled by the calling code\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,qBAAqB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,GAAG,EAAEC,SAAS,KAAK;EACpE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MACzDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBT,KAAK;QACLC,GAAG;QACHC;MACJ,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,mCAAmC,CAAC;IACvE;IAEA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZG,OAAO,CAACH,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;MAC1CC,MAAM,EAAE;IACZ,CAAC,CAAC;IAEF,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIG,KAAK,CAAC,0BAA0B,CAAC;IAC/C;IAEA,OAAOV,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZG,OAAO,CAACH,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK,CAAC,CAAC;EACjB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}